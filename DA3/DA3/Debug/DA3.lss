
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  0000064a  000006de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001d0  008001d0  000007ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc2  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000080f3  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012f  00000000  00000000  0000a7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000a902  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000481  00000000  00000000  0000a96a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e4       	ldi	r30, 0x4A	; 74
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 3d       	cpi	r26, 0xD0	; 208
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 ed       	ldi	r26, 0xD0	; 208
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 3d       	cpi	r26, 0xD8	; 216
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	47 d0       	rcall	.+142    	; 0x176 <main>
  e8:	ae c2       	rjmp	.+1372   	; 0x646 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <UARTinit>:
	}
}

void UARTinit()
{
	UBRR0H = UBRRH_VALUE;
  ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
  f0:	87 e6       	ldi	r24, 0x67	; 103
  f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Set 8 bit
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
  f6:	e2 ec       	ldi	r30, 0xC2	; 194
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
	// Set 1 stop bit (default)
	// Disable parity (default)
	// Set asynchronous (default)
	// Enable RX interrupt
	UCSR0B |= (1 << RXCIE0);
 100:	e1 ec       	ldi	r30, 0xC1	; 193
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
	// Enable TX/RX
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 10a:	80 81       	ld	r24, Z
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <USART_tx_string>:
}

// Sends a string of characters over TX
void USART_tx_string(char *data)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
	// Repeat until input string is empty
	while (*data != '\0')
 116:	fc 01       	movw	r30, r24
 118:	20 81       	ld	r18, Z
 11a:	22 23       	and	r18, r18
 11c:	69 f0       	breq	.+26     	; 0x138 <USART_tx_string+0x26>
 11e:	dc 01       	movw	r26, r24
 120:	11 96       	adiw	r26, 0x01	; 1
	{
		// Wait for data register to be empty
		while ((UCSR0A & (1 << UDRE0)) != (1 << UDRE0))
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
		{
		}
		UDR0 = *data;
 126:	c6 ec       	ldi	r28, 0xC6	; 198
 128:	d0 e0       	ldi	r29, 0x00	; 0
{
	// Repeat until input string is empty
	while (*data != '\0')
	{
		// Wait for data register to be empty
		while ((UCSR0A & (1 << UDRE0)) != (1 << UDRE0))
 12a:	90 81       	ld	r25, Z
 12c:	95 ff       	sbrs	r25, 5
 12e:	fd cf       	rjmp	.-6      	; 0x12a <USART_tx_string+0x18>
		{
		}
		UDR0 = *data;
 130:	28 83       	st	Y, r18

// Sends a string of characters over TX
void USART_tx_string(char *data)
{
	// Repeat until input string is empty
	while (*data != '\0')
 132:	2d 91       	ld	r18, X+
 134:	21 11       	cpse	r18, r1
 136:	f9 cf       	rjmp	.-14     	; 0x12a <USART_tx_string+0x18>
		{
		}
		UDR0 = *data;
		data++;
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <help>:
	}
}

void help()
{
	USART_tx_string("\n\n");
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	e7 df       	rcall	.-50     	; 0x112 <USART_tx_string>
	USART_tx_string("'h' - help \n");
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	e4 df       	rcall	.-56     	; 0x112 <USART_tx_string>
	USART_tx_string("'o' - turn on LED0\n");
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	e1 df       	rcall	.-62     	; 0x112 <USART_tx_string>
	USART_tx_string("'O' - turn off LED0\n");
 150:	84 e2       	ldi	r24, 0x24	; 36
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	de df       	rcall	.-68     	; 0x112 <USART_tx_string>
	USART_tx_string("'p' - blink LED1\n");
 156:	89 e3       	ldi	r24, 0x39	; 57
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	db df       	rcall	.-74     	; 0x112 <USART_tx_string>
	USART_tx_string("'P' - stop blinking LED1\n");
 15c:	8b e4       	ldi	r24, 0x4B	; 75
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	d8 df       	rcall	.-80     	; 0x112 <USART_tx_string>
	USART_tx_string("'f' - fade intensity of LED2\n");
 162:	85 e6       	ldi	r24, 0x65	; 101
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	d5 df       	rcall	.-86     	; 0x112 <USART_tx_string>
	USART_tx_string("'F' - turn off LED2\n");
 168:	83 e8       	ldi	r24, 0x83	; 131
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	d2 df       	rcall	.-92     	; 0x112 <USART_tx_string>
 16e:	88 e9       	ldi	r24, 0x98	; 152
	USART_tx_string("'b' - display switch status\n");
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	cf cf       	rjmp	.-98     	; 0x112 <USART_tx_string>
 174:	08 95       	ret

00000176 <main>:
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 b9       	out	0x04, r24	; 4
volatile double dutyValue;          // Duty cycle value for fading

int main(void)
{
	DDRB = 0xFF;    // Set PORTB as output
	DDRC = 0x00;    // Set PORTC as input
 17a:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;   // Enable pull-up resistors on PORTC
 17c:	88 b9       	out	0x08, r24	; 8

	// Normal mode (default)
	// 1024 prescaler
	TCCR1B |= (1 << CS12) | (1 << CS10);
 17e:	e1 e8       	ldi	r30, 0x81	; 129
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	85 60       	ori	r24, 0x05	; 5
 186:	80 83       	st	Z, r24

	// Normal mode (default)
	// 1024 prescaler
	TCCR0B |= (1 << CS12) | (1 << CS10);
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	85 60       	ori	r24, 0x05	; 5
 18c:	85 bd       	out	0x25, r24	; 37

	UARTinit();     // Initialize UART
 18e:	ae df       	rcall	.-164    	; 0xec <UARTinit>
	help();         // Display help menu
 190:	d6 df       	rcall	.-84     	; 0x13e <help>
 192:	78 94       	sei
	sei();          // Enable interrupts
 194:	04 e8       	ldi	r16, 0x84	; 132
	while (1)
	{
		// Blink PB3 at 1 Hz if enabled
		if (TCNT1 == 7811)
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	68 94       	set
		{
			if (blinkBool == 1)
			{
				PORTB ^= (1 << 3);  // Toggle PB3
 19a:	aa 24       	eor	r10, r10
 19c:	a3 f8       	bld	r10, 3
 19e:	b1 2c       	mov	r11, r1

		// This turns on the LED when enabled.
		// While debugging, I had to add the second term of the conditional, likely due to rounding issues
		if (TCNT0 == 77)
		{
			if ((fadeBool == 1) & (dutyValue > 0.0025))
 1a0:	d1 e0       	ldi	r29, 0x01	; 1
 1a2:	9b 2c       	mov	r9, r11
 1a4:	f8 01       	movw	r30, r16
	help();         // Display help menu
	sei();          // Enable interrupts
	while (1)
	{
		// Blink PB3 at 1 Hz if enabled
		if (TCNT1 == 7811)
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	83 38       	cpi	r24, 0x83	; 131
 1ac:	9e 41       	sbci	r25, 0x1E	; 30
 1ae:	61 f4       	brne	.+24     	; 0x1c8 <main+0x52>
 1b0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
		{
			if (blinkBool == 1)
 1b4:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <__data_end+0x1>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <main+0x4c>
 1bc:	85 b1       	in	r24, 0x05	; 5
			{
				PORTB ^= (1 << 3);  // Toggle PB3
 1be:	8a 25       	eor	r24, r10
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	f8 01       	movw	r30, r16
			}
			TCNT1 = 0;
 1c4:	11 82       	std	Z+1, r1	; 0x01
 1c6:	10 82       	st	Z, r1
 1c8:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
		}
		if (blinkBool == 0)
 1cc:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <__data_end+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <main+0x60>
 1d4:	2b 98       	cbi	0x05, 3	; 5
		{
			PORTB &= ~(1 << 3);     // Turn off PB3
 1d6:	c6 b5       	in	r28, 0x26	; 38
		}

		// Blinks PB1 at 200 Hz if enabled with a duty cycle decreasing from 100% to 0% over 2 seconds
		// This turns off the LED and runs earlier the lower the duty cycle is
		if (TCNT0 == floor(77 * dutyValue))
 1d8:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <dutyValue>
 1dc:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <dutyValue+0x1>
 1e0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <dutyValue+0x2>
 1e4:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <dutyValue+0x3>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	4a e9       	ldi	r20, 0x9A	; 154
 1ee:	52 e4       	ldi	r21, 0x42	; 66
 1f0:	c7 d1       	rcall	.+910    	; 0x580 <__mulsf3>
 1f2:	fa d0       	rcall	.+500    	; 0x3e8 <floor>
 1f4:	6b 01       	movw	r12, r22
 1f6:	7c 01       	movw	r14, r24
 1f8:	6c 2f       	mov	r22, r28
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	b8 d0       	rcall	.+368    	; 0x372 <__floatsisf>
 202:	a7 01       	movw	r20, r14
 204:	96 01       	movw	r18, r12
 206:	af d0       	rcall	.+350    	; 0x366 <__cmpsf2>
 208:	81 11       	cpse	r24, r1
 20a:	01 c0       	rjmp	.+2      	; 0x20e <main+0x98>
 20c:	29 98       	cbi	0x05, 1	; 5
		{
			PORTB &= ~(1 << 1);     // Turn off PB1
 20e:	86 b5       	in	r24, 0x26	; 38
		}

		// This turns on the LED when enabled.
		// While debugging, I had to add the second term of the conditional, likely due to rounding issues
		if (TCNT0 == 77)
 210:	8d 34       	cpi	r24, 0x4D	; 77
 212:	41 f6       	brne	.-112    	; 0x1a4 <main+0x2e>
 214:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <fadeBool>
		{
			if ((fadeBool == 1) & (dutyValue > 0.0025))
 218:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <fadeBool+0x1>
 21c:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <dutyValue>
 220:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <dutyValue+0x1>
 224:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <dutyValue+0x2>
 228:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <dutyValue+0x3>
 22c:	4d 2f       	mov	r20, r29
 22e:	21 30       	cpi	r18, 0x01	; 1
 230:	31 05       	cpc	r19, r1
 232:	09 f0       	breq	.+2      	; 0x236 <main+0xc0>
 234:	49 2d       	mov	r20, r9
 236:	44 23       	and	r20, r20
 238:	59 f0       	breq	.+22     	; 0x250 <main+0xda>
 23a:	cd 2f       	mov	r28, r29
 23c:	2a e0       	ldi	r18, 0x0A	; 10
 23e:	37 ed       	ldi	r19, 0xD7	; 215
 240:	43 e2       	ldi	r20, 0x23	; 35
 242:	5b e3       	ldi	r21, 0x3B	; 59
 244:	99 d1       	rcall	.+818    	; 0x578 <__gesf2>
 246:	18 16       	cp	r1, r24
 248:	0c f0       	brlt	.+2      	; 0x24c <main+0xd6>
 24a:	c9 2d       	mov	r28, r9
 24c:	c1 11       	cpse	r28, r1
 24e:	29 9a       	sbi	0x05, 1	; 5
			{
				PORTB |= (1 << 1);  // Turn on PB1
 250:	b6 bc       	out	0x26, r11	; 38
			}
			TCNT0 = 0;
 252:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <dutyValue>
			if (dutyValue != 0)
 256:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <dutyValue+0x1>
 25a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <dutyValue+0x2>
 25e:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <dutyValue+0x3>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	a9 01       	movw	r20, r18
 268:	7e d0       	rcall	.+252    	; 0x366 <__cmpsf2>
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <main+0xfa>
 26e:	9a cf       	rjmp	.-204    	; 0x1a4 <main+0x2e>
 270:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <dutyValue>
			{
				dutyValue = dutyValue - 0.0025;
 274:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <dutyValue+0x1>
 278:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <dutyValue+0x2>
 27c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <dutyValue+0x3>
 280:	2a e0       	ldi	r18, 0x0A	; 10
 282:	37 ed       	ldi	r19, 0xD7	; 215
 284:	43 e2       	ldi	r20, 0x23	; 35
 286:	5b e3       	ldi	r21, 0x3B	; 59
 288:	09 d0       	rcall	.+18     	; 0x29c <__subsf3>
 28a:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <dutyValue>
 28e:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <dutyValue+0x1>
 292:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <dutyValue+0x2>
 296:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <dutyValue+0x3>
 29a:	84 cf       	rjmp	.-248    	; 0x1a4 <main+0x2e>

0000029c <__subsf3>:
 29c:	50 58       	subi	r21, 0x80	; 128

0000029e <__addsf3>:
 29e:	bb 27       	eor	r27, r27
 2a0:	aa 27       	eor	r26, r26
 2a2:	0e d0       	rcall	.+28     	; 0x2c0 <__addsf3x>
 2a4:	18 c1       	rjmp	.+560    	; 0x4d6 <__fp_round>
 2a6:	09 d1       	rcall	.+530    	; 0x4ba <__fp_pscA>
 2a8:	30 f0       	brcs	.+12     	; 0x2b6 <__addsf3+0x18>
 2aa:	0e d1       	rcall	.+540    	; 0x4c8 <__fp_pscB>
 2ac:	20 f0       	brcs	.+8      	; 0x2b6 <__addsf3+0x18>
 2ae:	31 f4       	brne	.+12     	; 0x2bc <__addsf3+0x1e>
 2b0:	9f 3f       	cpi	r25, 0xFF	; 255
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <__addsf3+0x1a>
 2b4:	1e f4       	brtc	.+6      	; 0x2bc <__addsf3+0x1e>
 2b6:	fe c0       	rjmp	.+508    	; 0x4b4 <__fp_nan>
 2b8:	0e f4       	brtc	.+2      	; 0x2bc <__addsf3+0x1e>
 2ba:	e0 95       	com	r30
 2bc:	e7 fb       	bst	r30, 7
 2be:	cb c0       	rjmp	.+406    	; 0x456 <__fp_inf>

000002c0 <__addsf3x>:
 2c0:	e9 2f       	mov	r30, r25
 2c2:	1a d1       	rcall	.+564    	; 0x4f8 <__fp_split3>
 2c4:	80 f3       	brcs	.-32     	; 0x2a6 <__addsf3+0x8>
 2c6:	ba 17       	cp	r27, r26
 2c8:	62 07       	cpc	r22, r18
 2ca:	73 07       	cpc	r23, r19
 2cc:	84 07       	cpc	r24, r20
 2ce:	95 07       	cpc	r25, r21
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <__addsf3x+0x18>
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <__addsf3x+0x30>
 2d4:	9e f5       	brtc	.+102    	; 0x33c <__addsf3x+0x7c>
 2d6:	49 c1       	rjmp	.+658    	; 0x56a <__fp_zero>
 2d8:	0e f4       	brtc	.+2      	; 0x2dc <__addsf3x+0x1c>
 2da:	e0 95       	com	r30
 2dc:	0b 2e       	mov	r0, r27
 2de:	ba 2f       	mov	r27, r26
 2e0:	a0 2d       	mov	r26, r0
 2e2:	0b 01       	movw	r0, r22
 2e4:	b9 01       	movw	r22, r18
 2e6:	90 01       	movw	r18, r0
 2e8:	0c 01       	movw	r0, r24
 2ea:	ca 01       	movw	r24, r20
 2ec:	a0 01       	movw	r20, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	ff 27       	eor	r31, r31
 2f2:	59 1b       	sub	r21, r25
 2f4:	99 f0       	breq	.+38     	; 0x31c <__addsf3x+0x5c>
 2f6:	59 3f       	cpi	r21, 0xF9	; 249
 2f8:	50 f4       	brcc	.+20     	; 0x30e <__addsf3x+0x4e>
 2fa:	50 3e       	cpi	r21, 0xE0	; 224
 2fc:	68 f1       	brcs	.+90     	; 0x358 <__addsf3x+0x98>
 2fe:	1a 16       	cp	r1, r26
 300:	f0 40       	sbci	r31, 0x00	; 0
 302:	a2 2f       	mov	r26, r18
 304:	23 2f       	mov	r18, r19
 306:	34 2f       	mov	r19, r20
 308:	44 27       	eor	r20, r20
 30a:	58 5f       	subi	r21, 0xF8	; 248
 30c:	f3 cf       	rjmp	.-26     	; 0x2f4 <__addsf3x+0x34>
 30e:	46 95       	lsr	r20
 310:	37 95       	ror	r19
 312:	27 95       	ror	r18
 314:	a7 95       	ror	r26
 316:	f0 40       	sbci	r31, 0x00	; 0
 318:	53 95       	inc	r21
 31a:	c9 f7       	brne	.-14     	; 0x30e <__addsf3x+0x4e>
 31c:	7e f4       	brtc	.+30     	; 0x33c <__addsf3x+0x7c>
 31e:	1f 16       	cp	r1, r31
 320:	ba 0b       	sbc	r27, r26
 322:	62 0b       	sbc	r22, r18
 324:	73 0b       	sbc	r23, r19
 326:	84 0b       	sbc	r24, r20
 328:	ba f0       	brmi	.+46     	; 0x358 <__addsf3x+0x98>
 32a:	91 50       	subi	r25, 0x01	; 1
 32c:	a1 f0       	breq	.+40     	; 0x356 <__addsf3x+0x96>
 32e:	ff 0f       	add	r31, r31
 330:	bb 1f       	adc	r27, r27
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	c2 f7       	brpl	.-16     	; 0x32a <__addsf3x+0x6a>
 33a:	0e c0       	rjmp	.+28     	; 0x358 <__addsf3x+0x98>
 33c:	ba 0f       	add	r27, r26
 33e:	62 1f       	adc	r22, r18
 340:	73 1f       	adc	r23, r19
 342:	84 1f       	adc	r24, r20
 344:	48 f4       	brcc	.+18     	; 0x358 <__addsf3x+0x98>
 346:	87 95       	ror	r24
 348:	77 95       	ror	r23
 34a:	67 95       	ror	r22
 34c:	b7 95       	ror	r27
 34e:	f7 95       	ror	r31
 350:	9e 3f       	cpi	r25, 0xFE	; 254
 352:	08 f0       	brcs	.+2      	; 0x356 <__addsf3x+0x96>
 354:	b3 cf       	rjmp	.-154    	; 0x2bc <__addsf3+0x1e>
 356:	93 95       	inc	r25
 358:	88 0f       	add	r24, r24
 35a:	08 f0       	brcs	.+2      	; 0x35e <__addsf3x+0x9e>
 35c:	99 27       	eor	r25, r25
 35e:	ee 0f       	add	r30, r30
 360:	97 95       	ror	r25
 362:	87 95       	ror	r24
 364:	08 95       	ret

00000366 <__cmpsf2>:
 366:	53 d0       	rcall	.+166    	; 0x40e <__fp_cmp>
 368:	08 f4       	brcc	.+2      	; 0x36c <__cmpsf2+0x6>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret

0000036e <__floatunsisf>:
 36e:	e8 94       	clt
 370:	09 c0       	rjmp	.+18     	; 0x384 <__floatsisf+0x12>

00000372 <__floatsisf>:
 372:	97 fb       	bst	r25, 7
 374:	3e f4       	brtc	.+14     	; 0x384 <__floatsisf+0x12>
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	99 23       	and	r25, r25
 386:	a9 f0       	breq	.+42     	; 0x3b2 <__floatsisf+0x40>
 388:	f9 2f       	mov	r31, r25
 38a:	96 e9       	ldi	r25, 0x96	; 150
 38c:	bb 27       	eor	r27, r27
 38e:	93 95       	inc	r25
 390:	f6 95       	lsr	r31
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b7 95       	ror	r27
 39a:	f1 11       	cpse	r31, r1
 39c:	f8 cf       	rjmp	.-16     	; 0x38e <__floatsisf+0x1c>
 39e:	fa f4       	brpl	.+62     	; 0x3de <__floatsisf+0x6c>
 3a0:	bb 0f       	add	r27, r27
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__floatsisf+0x36>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	1b c0       	rjmp	.+54     	; 0x3de <__floatsisf+0x6c>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	16 c0       	rjmp	.+44     	; 0x3de <__floatsisf+0x6c>
 3b2:	88 23       	and	r24, r24
 3b4:	11 f0       	breq	.+4      	; 0x3ba <__floatsisf+0x48>
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <__floatsisf+0x6a>
 3ba:	77 23       	and	r23, r23
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <__floatsisf+0x54>
 3be:	9e e8       	ldi	r25, 0x8E	; 142
 3c0:	87 2f       	mov	r24, r23
 3c2:	76 2f       	mov	r23, r22
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__floatsisf+0x5e>
 3c6:	66 23       	and	r22, r22
 3c8:	71 f0       	breq	.+28     	; 0x3e6 <__floatsisf+0x74>
 3ca:	96 e8       	ldi	r25, 0x86	; 134
 3cc:	86 2f       	mov	r24, r22
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	2a f0       	brmi	.+10     	; 0x3de <__floatsisf+0x6c>
 3d4:	9a 95       	dec	r25
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	da f7       	brpl	.-10     	; 0x3d4 <__floatsisf+0x62>
 3de:	88 0f       	add	r24, r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <floor>:
 3e8:	a9 d0       	rcall	.+338    	; 0x53c <__fp_trunc>
 3ea:	80 f0       	brcs	.+32     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ec:	9f 37       	cpi	r25, 0x7F	; 127
 3ee:	40 f4       	brcc	.+16     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f0:	91 11       	cpse	r25, r1
 3f2:	0e f0       	brts	.+2      	; 0x3f6 <floor+0xe>
 3f4:	bb c0       	rjmp	.+374    	; 0x56c <__fp_szero>
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	9f eb       	ldi	r25, 0xBF	; 191
 3fe:	08 95       	ret
 400:	26 f4       	brtc	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	1b 16       	cp	r1, r27
 404:	61 1d       	adc	r22, r1
 406:	71 1d       	adc	r23, r1
 408:	81 1d       	adc	r24, r1
 40a:	2b c0       	rjmp	.+86     	; 0x462 <__fp_mintl>
 40c:	45 c0       	rjmp	.+138    	; 0x498 <__fp_mpack>

0000040e <__fp_cmp>:
 40e:	99 0f       	add	r25, r25
 410:	00 08       	sbc	r0, r0
 412:	55 0f       	add	r21, r21
 414:	aa 0b       	sbc	r26, r26
 416:	e0 e8       	ldi	r30, 0x80	; 128
 418:	fe ef       	ldi	r31, 0xFE	; 254
 41a:	16 16       	cp	r1, r22
 41c:	17 06       	cpc	r1, r23
 41e:	e8 07       	cpc	r30, r24
 420:	f9 07       	cpc	r31, r25
 422:	c0 f0       	brcs	.+48     	; 0x454 <__fp_cmp+0x46>
 424:	12 16       	cp	r1, r18
 426:	13 06       	cpc	r1, r19
 428:	e4 07       	cpc	r30, r20
 42a:	f5 07       	cpc	r31, r21
 42c:	98 f0       	brcs	.+38     	; 0x454 <__fp_cmp+0x46>
 42e:	62 1b       	sub	r22, r18
 430:	73 0b       	sbc	r23, r19
 432:	84 0b       	sbc	r24, r20
 434:	95 0b       	sbc	r25, r21
 436:	39 f4       	brne	.+14     	; 0x446 <__fp_cmp+0x38>
 438:	0a 26       	eor	r0, r26
 43a:	61 f0       	breq	.+24     	; 0x454 <__fp_cmp+0x46>
 43c:	23 2b       	or	r18, r19
 43e:	24 2b       	or	r18, r20
 440:	25 2b       	or	r18, r21
 442:	21 f4       	brne	.+8      	; 0x44c <__fp_cmp+0x3e>
 444:	08 95       	ret
 446:	0a 26       	eor	r0, r26
 448:	09 f4       	brne	.+2      	; 0x44c <__fp_cmp+0x3e>
 44a:	a1 40       	sbci	r26, 0x01	; 1
 44c:	a6 95       	lsr	r26
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	81 1d       	adc	r24, r1
 452:	81 1d       	adc	r24, r1
 454:	08 95       	ret

00000456 <__fp_inf>:
 456:	97 f9       	bld	r25, 7
 458:	9f 67       	ori	r25, 0x7F	; 127
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	08 95       	ret

00000462 <__fp_mintl>:
 462:	88 23       	and	r24, r24
 464:	71 f4       	brne	.+28     	; 0x482 <__fp_mintl+0x20>
 466:	77 23       	and	r23, r23
 468:	21 f0       	breq	.+8      	; 0x472 <__fp_mintl+0x10>
 46a:	98 50       	subi	r25, 0x08	; 8
 46c:	87 2b       	or	r24, r23
 46e:	76 2f       	mov	r23, r22
 470:	07 c0       	rjmp	.+14     	; 0x480 <__fp_mintl+0x1e>
 472:	66 23       	and	r22, r22
 474:	11 f4       	brne	.+4      	; 0x47a <__fp_mintl+0x18>
 476:	99 27       	eor	r25, r25
 478:	0d c0       	rjmp	.+26     	; 0x494 <__fp_mintl+0x32>
 47a:	90 51       	subi	r25, 0x10	; 16
 47c:	86 2b       	or	r24, r22
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	2a f0       	brmi	.+10     	; 0x48e <__fp_mintl+0x2c>
 484:	9a 95       	dec	r25
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	da f7       	brpl	.-10     	; 0x484 <__fp_mintl+0x22>
 48e:	88 0f       	add	r24, r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__fp_mpack>:
 498:	9f 3f       	cpi	r25, 0xFF	; 255
 49a:	31 f0       	breq	.+12     	; 0x4a8 <__fp_mpack_finite+0xc>

0000049c <__fp_mpack_finite>:
 49c:	91 50       	subi	r25, 0x01	; 1
 49e:	20 f4       	brcc	.+8      	; 0x4a8 <__fp_mpack_finite+0xc>
 4a0:	87 95       	ror	r24
 4a2:	77 95       	ror	r23
 4a4:	67 95       	ror	r22
 4a6:	b7 95       	ror	r27
 4a8:	88 0f       	add	r24, r24
 4aa:	91 1d       	adc	r25, r1
 4ac:	96 95       	lsr	r25
 4ae:	87 95       	ror	r24
 4b0:	97 f9       	bld	r25, 7
 4b2:	08 95       	ret

000004b4 <__fp_nan>:
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	08 95       	ret

000004ba <__fp_pscA>:
 4ba:	00 24       	eor	r0, r0
 4bc:	0a 94       	dec	r0
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	18 06       	cpc	r1, r24
 4c4:	09 06       	cpc	r0, r25
 4c6:	08 95       	ret

000004c8 <__fp_pscB>:
 4c8:	00 24       	eor	r0, r0
 4ca:	0a 94       	dec	r0
 4cc:	12 16       	cp	r1, r18
 4ce:	13 06       	cpc	r1, r19
 4d0:	14 06       	cpc	r1, r20
 4d2:	05 06       	cpc	r0, r21
 4d4:	08 95       	ret

000004d6 <__fp_round>:
 4d6:	09 2e       	mov	r0, r25
 4d8:	03 94       	inc	r0
 4da:	00 0c       	add	r0, r0
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__fp_round+0xc>
 4de:	88 23       	and	r24, r24
 4e0:	52 f0       	brmi	.+20     	; 0x4f6 <__fp_round+0x20>
 4e2:	bb 0f       	add	r27, r27
 4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__fp_round+0x20>
 4e6:	bf 2b       	or	r27, r31
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__fp_round+0x18>
 4ea:	60 ff       	sbrs	r22, 0
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__fp_round+0x20>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__fp_split3>:
 4f8:	57 fd       	sbrc	r21, 7
 4fa:	90 58       	subi	r25, 0x80	; 128
 4fc:	44 0f       	add	r20, r20
 4fe:	55 1f       	adc	r21, r21
 500:	59 f0       	breq	.+22     	; 0x518 <__fp_splitA+0x10>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	71 f0       	breq	.+28     	; 0x522 <__fp_splitA+0x1a>
 506:	47 95       	ror	r20

00000508 <__fp_splitA>:
 508:	88 0f       	add	r24, r24
 50a:	97 fb       	bst	r25, 7
 50c:	99 1f       	adc	r25, r25
 50e:	61 f0       	breq	.+24     	; 0x528 <__fp_splitA+0x20>
 510:	9f 3f       	cpi	r25, 0xFF	; 255
 512:	79 f0       	breq	.+30     	; 0x532 <__fp_splitA+0x2a>
 514:	87 95       	ror	r24
 516:	08 95       	ret
 518:	12 16       	cp	r1, r18
 51a:	13 06       	cpc	r1, r19
 51c:	14 06       	cpc	r1, r20
 51e:	55 1f       	adc	r21, r21
 520:	f2 cf       	rjmp	.-28     	; 0x506 <__fp_split3+0xe>
 522:	46 95       	lsr	r20
 524:	f1 df       	rcall	.-30     	; 0x508 <__fp_splitA>
 526:	08 c0       	rjmp	.+16     	; 0x538 <__fp_splitA+0x30>
 528:	16 16       	cp	r1, r22
 52a:	17 06       	cpc	r1, r23
 52c:	18 06       	cpc	r1, r24
 52e:	99 1f       	adc	r25, r25
 530:	f1 cf       	rjmp	.-30     	; 0x514 <__fp_splitA+0xc>
 532:	86 95       	lsr	r24
 534:	71 05       	cpc	r23, r1
 536:	61 05       	cpc	r22, r1
 538:	08 94       	sec
 53a:	08 95       	ret

0000053c <__fp_trunc>:
 53c:	e5 df       	rcall	.-54     	; 0x508 <__fp_splitA>
 53e:	a0 f0       	brcs	.+40     	; 0x568 <__fp_trunc+0x2c>
 540:	be e7       	ldi	r27, 0x7E	; 126
 542:	b9 17       	cp	r27, r25
 544:	88 f4       	brcc	.+34     	; 0x568 <__fp_trunc+0x2c>
 546:	bb 27       	eor	r27, r27
 548:	9f 38       	cpi	r25, 0x8F	; 143
 54a:	60 f4       	brcc	.+24     	; 0x564 <__fp_trunc+0x28>
 54c:	16 16       	cp	r1, r22
 54e:	b1 1d       	adc	r27, r1
 550:	67 2f       	mov	r22, r23
 552:	78 2f       	mov	r23, r24
 554:	88 27       	eor	r24, r24
 556:	98 5f       	subi	r25, 0xF8	; 248
 558:	f7 cf       	rjmp	.-18     	; 0x548 <__fp_trunc+0xc>
 55a:	86 95       	lsr	r24
 55c:	77 95       	ror	r23
 55e:	67 95       	ror	r22
 560:	b1 1d       	adc	r27, r1
 562:	93 95       	inc	r25
 564:	96 39       	cpi	r25, 0x96	; 150
 566:	c8 f3       	brcs	.-14     	; 0x55a <__fp_trunc+0x1e>
 568:	08 95       	ret

0000056a <__fp_zero>:
 56a:	e8 94       	clt

0000056c <__fp_szero>:
 56c:	bb 27       	eor	r27, r27
 56e:	66 27       	eor	r22, r22
 570:	77 27       	eor	r23, r23
 572:	cb 01       	movw	r24, r22
 574:	97 f9       	bld	r25, 7
 576:	08 95       	ret

00000578 <__gesf2>:
 578:	4a df       	rcall	.-364    	; 0x40e <__fp_cmp>
 57a:	08 f4       	brcc	.+2      	; 0x57e <__gesf2+0x6>
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	08 95       	ret

00000580 <__mulsf3>:
 580:	0b d0       	rcall	.+22     	; 0x598 <__mulsf3x>
 582:	a9 cf       	rjmp	.-174    	; 0x4d6 <__fp_round>
 584:	9a df       	rcall	.-204    	; 0x4ba <__fp_pscA>
 586:	28 f0       	brcs	.+10     	; 0x592 <__mulsf3+0x12>
 588:	9f df       	rcall	.-194    	; 0x4c8 <__fp_pscB>
 58a:	18 f0       	brcs	.+6      	; 0x592 <__mulsf3+0x12>
 58c:	95 23       	and	r25, r21
 58e:	09 f0       	breq	.+2      	; 0x592 <__mulsf3+0x12>
 590:	62 cf       	rjmp	.-316    	; 0x456 <__fp_inf>
 592:	90 cf       	rjmp	.-224    	; 0x4b4 <__fp_nan>
 594:	11 24       	eor	r1, r1
 596:	ea cf       	rjmp	.-44     	; 0x56c <__fp_szero>

00000598 <__mulsf3x>:
 598:	af df       	rcall	.-162    	; 0x4f8 <__fp_split3>
 59a:	a0 f3       	brcs	.-24     	; 0x584 <__mulsf3+0x4>

0000059c <__mulsf3_pse>:
 59c:	95 9f       	mul	r25, r21
 59e:	d1 f3       	breq	.-12     	; 0x594 <__mulsf3+0x14>
 5a0:	95 0f       	add	r25, r21
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	55 1f       	adc	r21, r21
 5a6:	62 9f       	mul	r22, r18
 5a8:	f0 01       	movw	r30, r0
 5aa:	72 9f       	mul	r23, r18
 5ac:	bb 27       	eor	r27, r27
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	63 9f       	mul	r22, r19
 5b4:	aa 27       	eor	r26, r26
 5b6:	f0 0d       	add	r31, r0
 5b8:	b1 1d       	adc	r27, r1
 5ba:	aa 1f       	adc	r26, r26
 5bc:	64 9f       	mul	r22, r20
 5be:	66 27       	eor	r22, r22
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	66 1f       	adc	r22, r22
 5c6:	82 9f       	mul	r24, r18
 5c8:	22 27       	eor	r18, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 9f       	mul	r23, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	62 1f       	adc	r22, r18
 5d8:	83 9f       	mul	r24, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	22 1f       	adc	r18, r18
 5e0:	74 9f       	mul	r23, r20
 5e2:	33 27       	eor	r19, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	23 1f       	adc	r18, r19
 5ea:	84 9f       	mul	r24, r20
 5ec:	60 0d       	add	r22, r0
 5ee:	21 1d       	adc	r18, r1
 5f0:	82 2f       	mov	r24, r18
 5f2:	76 2f       	mov	r23, r22
 5f4:	6a 2f       	mov	r22, r26
 5f6:	11 24       	eor	r1, r1
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	8a f0       	brmi	.+34     	; 0x620 <__mulsf3_pse+0x84>
 5fe:	e1 f0       	breq	.+56     	; 0x638 <__mulsf3_pse+0x9c>
 600:	88 23       	and	r24, r24
 602:	4a f0       	brmi	.+18     	; 0x616 <__mulsf3_pse+0x7a>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	91 50       	subi	r25, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	a9 f7       	brne	.-22     	; 0x600 <__mulsf3_pse+0x64>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	70 f0       	brcs	.+28     	; 0x638 <__mulsf3_pse+0x9c>
 61c:	1c cf       	rjmp	.-456    	; 0x456 <__fp_inf>
 61e:	a6 cf       	rjmp	.-180    	; 0x56c <__fp_szero>
 620:	5f 3f       	cpi	r21, 0xFF	; 255
 622:	ec f3       	brlt	.-6      	; 0x61e <__mulsf3_pse+0x82>
 624:	98 3e       	cpi	r25, 0xE8	; 232
 626:	dc f3       	brlt	.-10     	; 0x61e <__mulsf3_pse+0x82>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b7 95       	ror	r27
 630:	f7 95       	ror	r31
 632:	e7 95       	ror	r30
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	c1 f7       	brne	.-16     	; 0x628 <__mulsf3_pse+0x8c>
 638:	fe 2b       	or	r31, r30
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <_exit>:
 646:	f8 94       	cli

00000648 <__stop_program>:
 648:	ff cf       	rjmp	.-2      	; 0x648 <__stop_program>
